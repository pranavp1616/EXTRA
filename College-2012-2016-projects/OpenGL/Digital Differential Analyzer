#include <stdio.h>
#include <GL/glut.h>

static int wHeight = 0;

// open gl functions
void DisplayFunc();
void MouseFunc(int button,int state,int x,int y);
void KeyboardFunc(unsigned char key,int x,int y);
void Init();

// algo functions
void DDA(int x1,int y1,int x2,int y2);
void DDA_utility(int,int,int,int);
void SetPixel(int x,int y);
int roundOf(float);

typedef struct
{
        GLint x;
        GLint y;
} GLPOINT;

int main(int argc,char* argv[])
{
        glutInit(&argc,argv);
        glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
        glutInitWindowPosition(100,100);
        glutInitWindowSize(640,480);
        glutCreateWindow("DDA Line Drawing Algorithm");
        
        wHeight = glutGet(GLUT_WINDOW_HEIGHT);
        
        glutDisplayFunc(DisplayFunc);
        glutMouseFunc(MouseFunc);
        glutKeyboardFunc(KeyboardFunc);
        
        Init();
        glutMainLoop();
        return 0;
        
}


void MouseFunc(int button,int state,int x,int y)
{
        static int count;
        static GLPOINT points[2];
        if(button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
        {
                points[count].x = x;
                points[count].y = wHeight - y;
                count++;
        }
        if(count == 2)
        {
                DDA(points[0].x,points[0].y,points[1].x,points[1].y);
                count=0;
        }
}
void KeyboardFunc(unsigned char key,int x,int y)
{
}



void DisplayFunc()
{
        glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(0.0f, 1.0f, 0.0f);
	glFlush();
}

void Init()
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
	glColor3f(0.5f, 0.5f, 0.5f);
	glPointSize(1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 640.0, 0.0, 480.0);
}


void SetPixel(int x,int y)
{
        glColor3f(0,0,0);
        glBegin(GL_POINTS);
                glVertex2i(x,y);
        glEnd();
        glFlush();
        
        
}

int roundOf(float y)
{
        int num = (int)y;
        float diff = y-(num*1.0);
        if(diff <0.5)
                return num;
                return num+1; 
        
}
void DDA_utility(int x1,int y1,int x2,int y2) 
{
   float y_diff = y2-y1;
   float x_diff = x2-x1;
   float m=y_diff/x_diff; 
   
   if(m>0) // +ve slope
   {
        if(abs(m)<=1) // horizontal
        {
                float dy = y1*1.0f;
                int i=x1;
                for(;i<=x2;i++)
                {
                        int ry = roundOf(dy);
                        SetPixel(i,ry);
                        dy = dy + m;
                }
        }
        else // vertical
        {
                float dx = x1*1.0f;
                int i=y1;
                float res = (1/m);
                
                for(;i<=y2;i++)
                {
                        int rx = roundOf(dx);
                        SetPixel(rx,i);
                        dx = dx+ res;
                }
        }
   }
   else // -ve slope
   {
        if(abs(m) <=1)  // horizontal
        {
                float dy = y1*1.0f;
                int i=x1;
                for(;i<=x2;i++)
                {
                        int ry = roundOf(dy);
                        SetPixel(i,ry);
                        dy = dy + m;
                }
                
        }
        else // vertical
        {
                float dx = x1*1.0f;
                int i=y1;
                float res = (1/m);
                for(;i>=y2;i--)
                {
                        int rx = roundOf(dx);
                        SetPixel(rx,i);
                        dx = dx-res;
                }
        }
   }
   
}
void DDA(int x1,int y1,int x2,int y2)
{
        if(x1 <= x2)
        {
                DDA_utility(x1,y1,x2,y2);
        }
        else
        {
                DDA_utility(x2,y2,x1,y1);
       
        }
}

