#include <stdio.h>
#include <GL/glut.h>

static int wHeight = 0;

// open gl functions
void DisplayFunc();
void MouseFunc(int button,int state,int x,int y);
void KeyboardFunc(unsigned char key,int x,int y);
void Init();

// algo functions

void Bresenham(int x1,int y1,int x2,int y2);
void Bresenham_utility(int x1,int y1,int x2,int y2);

void SetPixel(int x,int y);

typedef struct
{
        GLint x;
        GLint y;
} GLPOINT;

int main(int argc,char* argv[])
{
        glutInit(&argc,argv);
        glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
        glutInitWindowPosition(100,100);
        glutInitWindowSize(640,480);
        glutCreateWindow("DDA Line Drawing Algorithm");
        
        wHeight = glutGet(GLUT_WINDOW_HEIGHT);
        
        glutDisplayFunc(DisplayFunc);
        glutMouseFunc(MouseFunc);
        glutKeyboardFunc(KeyboardFunc);
        
        Init();
        glutMainLoop();
        return 0;
        
}


void MouseFunc(int button,int state,int x,int y)
{
        static int count;
        static GLPOINT points[2];
        if(button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
        {
                points[count].x = x;
                points[count].y = wHeight - y;
                count++;
        }
        if(count == 2)
        {
                Bresenham(points[0].x,points[0].y,points[1].x,points[1].y);
                count=0;
        }
}
void KeyboardFunc(unsigned char key,int x,int y)
{
}



void DisplayFunc()
{
        glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(0.0f, 1.0f, 0.0f);
	glFlush();
}

void Init()
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
	glColor3f(0.5f, 0.5f, 0.5f);
	glPointSize(1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 640.0, 0.0, 480.0);
}


void SetPixel(int x,int y)
{
        glColor3f(0,0,0);
        glBegin(GL_POINTS);
                glVertex2i(x,y);
        glEnd();
        glFlush();
        
        
}

void Bresenham(int x1,int y1,int x2,int y2)
{
    if(x1 <= x2)
        {
                Bresenham_utility(x1,y1,x2,y2);
        }
        else
        {
                Bresenham_utility(x2,y2,x1,y1);
       
        }
}
void Bresenham_utility(int x1,int y1,int x2,int y2)
{
   float dy = y2-y1;
   float dx = x2-x1;
   float m = dy/dx;
   
   if(m>=0) // +ve slope
   {
        if(abs(m) <=1)
        {
                int i=x1;
                int j =y1;
                float dp = 2*dy-dx;
                for(;i<=x2;i++)
                {
                        if(dp<=0) // -ve 
                        {
                                SetPixel(i,j);
                                dp = dp+2*dy;
                        }
                        else
                        {
                                SetPixel(i,j++);
                                dp = dp+2*dy-2*dx;
                        }
                }
        }
        else 
        {
                int i=x1;
                int j=y1;
                float dp = 2*dx-dy;
                for(;j<=y2;j++)
                {
                        if(dp<=0)
                        {
                            SetPixel(i,j);
                            dp = dp+2*dx;
                        }
                        else
                        {
                            SetPixel(i++,j);
                            dp = dp+2*dx-2*dy;
                        }
                }
        }
   }
   else // -ve slope
   {
                if(dy<0)
                        dy = -1*dy;
                if(dx<0)
                        dx = -1*dx;
                        
        if(abs(m) < 1) // horizontal
        { 
              
                int i=x1;
                int j =y1;
                float dp = 2*dy-dx;
                for(;i<=x2;i++)
                {
                        if(dp<=0) // -ve 
                        {
                                SetPixel(i,j);
                                dp = dp+2*dy;
                        }
                        else
                        {
                                SetPixel(i,j--);
                                dp = dp+2*dy-2*dx;
                        }
                }
        }
        else
        {
        
                int i=x1;
                int j=y1;
                float dp = 2*dx-dy;
                for(;j>=y2;j--)
                {
                        if(dp<=0)
                        {
                            SetPixel(i,j);
                            dp = dp+2*dx;
                        }
                        else
                        {
                            SetPixel(i++,j);
                            dp = dp+2*dx-2*dy;
                        }
                }
        }
   } 
}




